non_primes <- data.frame(1:70, ncol = 1)
View(non_primes)
non_primes <- data.frame(number = 1:70)
View(non_primes)
non_primes <- data.frame(number = 1:70)
find_factorization=function(x){
n=c()
i=2
r=x
while(prod(n)!=x){
if(!r%%i) {n=c(n,i);r=r/i;i=1}
i=i+1
}
n
}
non_primes$factorization <- find_factorization(non_primes$number)
non_primes$factorization <- apply(non_primes, 2, find_factorization)
non_primes$factorization <- apply(non_primes, 1, find_factorization)
non_primes$unique_factors <- unique(non_primes$factorization)
non_primes$unique_factors <- apply(non_primes[,"factorization"], 1, find_factorization)
non_primes$unique_factors <- apply(non_primes[,"factorization"], 1, unique)
unique(NULL)
non_primes <- data.frame(number = 2:70)
find_factorization=function(x){
n=c()
i=2
r=x
while(prod(n)!=x){
if(!r%%i) {n=c(n,i);r=r/i;i=1}
i=i+1
}
n
}
non_primes$factorization <- apply(non_primes, 1, find_factorization)
non_primes$unique_factors <- apply(non_primes[,"factorization"], 1, unique)
unique(3)
unique(c(2,3))
unique(c(2,2))
non_primes$unique_factors <- sapply(non_primes[,"factorization"], unique)
non_primes$unique_factors <- sapply(non_primes$factorization, unique)
non_primes <- data.frame(number = 1:70)
find_factorization=function(x){
n=c()
i=2
r=x
while(prod(n)!=x){
if(!r%%i) {n=c(n,i);r=r/i;i=1}
i=i+1
}
n
}
non_primes$factorization <- sapply(non_primes, find_factorization)
non_primes$factorization <- sapply(non_primes$number, find_factorization)
non_primes$unique_factors <- sapply(non_primes$factorization, unique)
non_primes$num_unique <- sapply(non_primes$unique_factors, length)
non_primes <- non_primes[non_primes$num_unique >= 2,]
table(unlist(non_primes$factorization))
non_primes <- non_primes[sapply(non_primes$unique_factors, function(x)
(!prod(c(13, 17, 19, 23, 29, 31) %in% x))), ]
table(unlist(non_primes$factorization))
non_primes <- non_primes[sapply(non_primes$factorization, function(x)
(!prod(c(13, 17, 19, 23, 29, 31) %in% x))), ]
c(13, 17, 19, 23, 29, 31) %in% non_primes$factorization
!prod(c(13, 17, 19, 23, 29, 31) %in% non_primes$factorization)
sapply(non_primes$factorization, function(x)
(!prod(c(13, 17, 19, 23, 29, 31) %in% x)))
!prod(c(13, 17, 19, 23, 29, 31) %in% c(2,3,13))
c(13, 17, 19, 23, 29, 31) %in% c(2,3,13)
prod(!(c(13, 17, 19, 23, 29, 31) %in% c(2,3,13)))
!(c(13, 17, 19, 23, 29, 31) %in% c(2,3,13))
!prod(!(c(13, 17, 19, 23, 29, 31) %in% c(2,3,13))))
!prod(!(c(13, 17, 19, 23, 29, 31) %in% c(2,3,13)))
min(!(c(13, 17, 19, 23, 29, 31) %in% c(2,3,13)))
min(!(c(13, 17, 19, 23, 29, 31) %in% c(2,3,12)))
max((c(13, 17, 19, 23, 29, 31) %in% c(2,3,12)))
max((c(13, 17, 19, 23, 29, 31) %in% c(2,3,13)))
non_primes <- non_primes[sapply(non_primes$factorization, function(x)
(!max(c(13, 17, 19, 23, 29, 31) %in% x))), ]
table(unlist(non_primes$factorization))
non_primes <-  non_primes[-(non_primes$number %in% c(35,70)),]
#Start with all numbers from 1 to 70
non_primes <- data.frame(number = 1:70)
#prime factorization code taken from
#https://stackoverflow.com/questions/49974601/r-prime-factorization
find_factorization=function(x){
n=c()
i=2
r=x
while(prod(n)!=x){
if(!r%%i) {
n=c(n,i)
r=r/i
i=1
}
i=i+1
}
n
}
#Find the factorization of each number, the unique factors in each,
#and the number of unique factors
non_primes$factorization <- sapply(non_primes$number, find_factorization)
non_primes$unique_factors <- sapply(non_primes$factorization, unique)
non_primes$num_unique <- sapply(non_primes$unique_factors, length)
#subset to numbers with 2+ unique factors, a la the 3rd friend's observation,
#which also excludes the primes, a la the 2nd friend's observation
non_primes <- non_primes[non_primes$num_unique >= 2,]
#This leaves 41 numbers.
########################################################################
### Given that each number was only picked once, all of their sets of 5
### numbers have the same product, and that product (like all numbers)
### can be uniquely expressed as a product of primes, we know that any
### prime that exists in the prime factorization of one picked set of 5
### numbers must exist in the other set of 5 numbers. So we can remove
### all numbers with a prime that does not show up in at least 5
### different numbers.
########################################################################
table(unlist(non_primes$factorization))
#numbers with 13, 17, 19, 23, 29, and 31 must be removed
#expression in the sapply picks those rows without (!) any (max) successful
#finding (%in%) of those primes
non_primes <- non_primes[sapply(non_primes$factorization, function(x)
(!max(c(13, 17, 19, 23, 29, 31) %in% x))), ]
table(unlist(non_primes$factorization))
non_primes <-  non_primes[!(non_primes$number %in% c(35,70)),]
table(unlist(non_primes$factorization))
non_primes <-  non_primes[!(non_primes$number == 63),]
table(unlist(non_primes$factorization))
2^7 * 3^4 * 5^2 * 7^1 * 11^1
